@page "/user/auth"

@inject IAccountRepository accountReository
@inject NavigationManager navigationManager
@inject IAuthService authService
@inject IStringLocalizer<Resource> localizer
@inject ToastService _toastService;

<div class="container-xl">
    <div class="row">
        <div class="col-xl-4 col-lg-5 col-12">
            <EditForm Model=user Context="AuthContext">
                <DataAnnotationsValidator />
                <div class="card auth-card">
                    <div class="card-header"><BitLabel>@localizer["Login"]</BitLabel></div>
                    <div class="card-body">
                        <BitTextField Label="@localizer["UsernameOrEmail"]" Class="dir-ltr" Placeholder="@localizer["UsernameOrEmail"]" @bind-Value="@user.UsernameOrEmail" IsRequired />
                        <BitTextField Label="@localizer["Password"]" Type="BitTextFieldType.Password" Class="dir-ltr" @bind-Value="@user.Password" IsRequired />
                    </div>
                    <BaseButtonComponent Caption=@localizer["Login"]
                                         IsBussyCaption=@localizer["Loading"]
                                         CssClass="col-12"
                                         Color=ColorEnum.Primary
                                         Icon=BitIconName.Signin
                                         EditContext=AuthContext
                                         OnClick=AuthUser></BaseButtonComponent>
                    <BitLink Class="text-center mt-2" Href="user/ForgetPassword">رمز خودتو فراموش کردی؟</BitLink>
                </div>
            </EditForm>
        </div>
        <div class="col-xl-8 col-lg-7 col-12">
            <img class="illustrations" src="../images/illustrations/Authentication-Security.svg" />
        </div>
    </div>
</div>

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public string? RedirectTo { get; set; }

    private AuthenticateDTO user = new AuthenticateDTO();

    protected override async Task OnInitializedAsync()
    {
        if (!String.IsNullOrWhiteSpace(RedirectTo))
            _toastService.ShowToast(localizer["PleaseLoginFirst"], Enums.ToastLevel.Info);
    }

    private async Task AuthUser()
    {
        var userToken = await accountReository.Login(user);
        if (!String.IsNullOrEmpty(userToken))
        {
            navigationManager.NavigateTo(RedirectTo == null ? "dashboard" : RedirectTo);
            await authService.Login(userToken);
        }
    }
}
