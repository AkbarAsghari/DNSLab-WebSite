@page "/dns/mytokens"

@inject IStringLocalizer<Resource> localizer
@inject IDNSRepository dnsRepository
@inject NavigationManager NavigationManager

@attribute [Authorize]

@if (tokenSummaries == null)
{
    <Loading />
}
else
{
    <Modal @ref="DeleteModal">
        <Title>
            <BitLabel>@localizer["AreYouSureDel"]</BitLabel>
        </Title>
        <Body>
            <BitLabel>@localizer["TokenName"] : @deleteRcord.Name </BitLabel>
        </Body>
        <Footer>
            <BaseButtonComponent Caption=@localizer["Cancel"]
                             IsBussyCaption=@localizer["Progressing"]
                             Color=ColorEnum.Warning
                             Icon=BitIconName.Cancel
                             OnClick=DeleteModal.Close />
            <BaseButtonComponent Caption=@localizer["Delete"]
                             IsBussyCaption=@localizer["Progressing"]
                             Color=ColorEnum.Danger
                             Icon=BitIconName.Delete
                             OnClick=AcceptDelete />
        </Footer>
    </Modal>

    <Modal @ref="TokenDetailsModal" ModalSize="ModalSizeEnum.XLarge">
        <Title>
            <BitLabel>@localizer["Details"]</BitLabel>
        </Title>
        <Body>
            @if (token == null)
            {
                <Loading />
            }
            else
            {
                <BitLabel>@localizer["TokenName"] : @token.Name </BitLabel>
                <hr />

                <div class="m-1">
                    @if (@isRevoking)
                    {
                        <BitLabel>توکن قبل غیر فعال و توکن جدید ایجاد خواهد شد</BitLabel>
                        <BaseButtonComponent Caption=@localizer["Continue"]
                                 IsBussyCaption=@localizer["Progressing"]
                                 CssClass="btn-sm"
                                 Color=ColorEnum.Danger
                                 Icon=BitIconName.Refresh
                                 OnClick=ContinueRevokeKey />
                        <BaseButtonComponent Caption=@localizer["Cancel"]
                                 IsBussyCaption=@localizer["Progressing"]
                                 CssClass="btn-sm"
                                 Color=ColorEnum.Success
                                 Icon=BitIconName.Cancel
                                 OnClick=ChangeRevokeStatus />
                    }
                    else
                    {
                        <BitLabel>@localizer["TokenKey"] : <code>@token.Key</code></BitLabel>
                        <BaseButtonComponent Caption=@localizer["RevokeKey"]
                                 IsBussyCaption=@localizer["Progressing"]
                                 IsOutLine=true
                                 CssClass="btn-sm col-lg-2"
                                 Color=ColorEnum.Danger
                                 Icon=BitIconName.Refresh
                                 OnClick=ChangeRevokeStatus />
                    }

                </div>
                <hr />

                <BitLabel>برای بروزرسانی IP هاست نِیم های متصل به این توکن میتوانید بدون نیاز به نصب برنامه روی سیستم عامل خود ، دستورات زیر را در استارت آپ سیستم عامل خود قرار دهید قرار دهید</BitLabel>
                <hr />
                <BitLabel>فایل های زیر با پسوند .sh هستند برای بروزرسانی آی پی با تکرار 5 دقیقه که با دو کتابخانه wget و cURL در دسترس میباشد</BitLabel>
                <BaseNavigateButtonComponent Text="دانلود فایل sh. (wget)"
                                     Target="_blank"
                                     Href="@($"https://api.dnslab.ir/DNS/shell/wget?tokenId={token.Id}&key={token.Key}")" />
                <BaseNavigateButtonComponent Text="دانلود فایل sh. (curl)"
                                     Target="_blank"
                                     Href="@($"https://api.dnslab.ir/DNS/shell/curl?tokenId={token.Id}&key={token.Key}")" />
                <hr />
                <BitLabel>فایل زیر با پسوند .ps1 هستند برای بروزرسانی آی پی با تکرار 5 دقیقه که با دو کتابخانه RestMethod در دسترس میباشد</BitLabel>
                <BaseNavigateButtonComponent Text="دانلود فایل ps1. (RestMethod)"
                                     Target="_blank"
                                     Href="@($"https://api.dnslab.ir/DNS/powershell/restmethod?tokenId={token.Id}&key={token.Key}")" />
                <hr />
                <BitLabel>لینک بروزرسانی آی پی های توکن</BitLabel>
                <BitLabel>
                    https://api.dnslab.ir/DNS/UDIBT?k=@token.Key
                    <CopyToClipboard Text=@("https://api.dnslab.ir/DNS/UDIBT?k=" + @token.Key) />
                </BitLabel>
                <BitMessageBar MessageBarType="BitMessageBarType.Warning">
                    این آدرس در هر جایی فراخوانی شود آی پی سیستم جایگزین خواهد شد
                </BitMessageBar>
            }
        </Body>
    </Modal>
    <div class="card mb-4">
        <div class="card-header">@localizer["Tokens"]</div>
        <div class="card-body">
            <div class="mb-3">
                <BaseNavigateButtonComponent Href="dns/createtoken"
                                         Text="@(localizer["CreateToken"])">
                </BaseNavigateButtonComponent>
            </div>
            <div class="mb-3">

                @if (tokenSummaries.Count() == 0)
                {
                    <BitMessageBar MessageBarType="BitMessageBarType.Warning">
                        <BitLabel>@localizer["ThereIsNoTokens"]</BitLabel>
                    </BitMessageBar>
                }
                else
                {
                    @foreach (var item in tokenSummaries.OrderByDescending(x => x.CreateDate))
                    {
                        <hr />
                        <div class="row">
                            <div class="row col-lg-9 col-sm-auto align-items-center">
                                <div class="col-lg-3 col-sm-12 align-self-center">
                                    <BitLabel>@localizer["TokenName"] : @item.Name</BitLabel>
                                </div>
                                <div class="col align-self-center">
                                    <div class="row">
                                        <BitLabel Class="small m-0">@localizer["CreateDate"] : @item.CreateDate.ToLocalizerString()</BitLabel>
                                        @if (@item.UpdateDate != null)
                                        {
                                            <BitLabel Class="small m-0">@localizer["UpdateDate"] : @item.UpdateDate.Value.ToLocalizerString()</BitLabel>
                                        }
                                    </div>
                                </div>
                                <div class="col">
                                    <BitLabel>@localizer["HostNamesCount"] : @item.HostNameCount</BitLabel>
                                </div>
                            </div>
                            <div class="col">
                                <BaseButtonComponent Caption=@localizer["Details"]
                                         IsBussyCaption=@localizer["Progressing"]
                                         Color=ColorEnum.Primary
                                         IsOutLine=true
                                         Icon=BitIconName.DataflowsLink
                                         OnClick=@(()=>OpenToken(item)) />
                                <BaseButtonComponent Caption=@localizer["Edit"]
                                         IsBussyCaption=@localizer["Progressing"]
                                         Color=ColorEnum.Warning
                                         IsOutLine=true
                                         Icon=BitIconName.Edit
                                         OnClick=@(()=>EditToken(item)) />
                                <BaseButtonComponent Caption=@localizer["Delete"]
                                         IsBussyCaption=@localizer["Progressing"]
                                         Color=ColorEnum.Danger
                                         IsOutLine=true
                                         Icon=BitIconName.Delete
                                         OnClick=@(()=>DeleteToken(item)) />
                            </div>
                        </div>
                    }
                    <hr />
                }
                <BitMessageBar MessageBarType="BitMessageBarType.Info">
                    <BitLabel>برای اطلاعات بیشتر لطفا <BitLink Href="Support/Create-New-Token-For-DNS" Target="_blank">این مطلب</BitLink> را مطالعه فرمایید</BitLabel>
                </BitMessageBar>
            </div>
        </div>
    </div>
}

@code {
    IEnumerable<TokenSummaryDTO> tokenSummaries;

    Modal DeleteModal { get; set; }
    Modal TokenDetailsModal { get; set; }

    TokenSummaryDTO deleteRcord { get; set; } = new TokenSummaryDTO();
    TokenDTO token;

    private bool isRevoking = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadTokensSummary();
            await this.InvokeAsync(() => StateHasChanged());
        }
    }

    private async Task LoadTokensSummary()
    {
        tokenSummaries = await dnsRepository.GetTokenSummary();
    }

    private async Task AcceptDelete()
    {
        if (deleteRcord != null)
        {
            if (await dnsRepository.DeleteToken(deleteRcord.Id))
            {
                await DeleteModal.Close();
                await LoadTokensSummary();
            }
        }
        deleteRcord = new TokenSummaryDTO();
    }

    private async Task ContinueRevokeKey()
    {
        var newTokenKey = await dnsRepository.RevokeTokenKey(token.Id);

        if (!String.IsNullOrEmpty(newTokenKey))
        {
            token.Key = newTokenKey;
            isRevoking = false;
        }
    }

    private void ChangeRevokeStatus() => isRevoking = !isRevoking;

    private async Task OpenToken(TokenSummaryDTO record)
    {
        await TokenDetailsModal.Open();

        token = await dnsRepository.GetToken(record.Id);
    }
    private async Task DeleteToken(TokenSummaryDTO record)
    {
        deleteRcord = record;
        await DeleteModal.Open();
    }

    private void EditToken(TokenSummaryDTO record)
    {
        NavigationManager.NavigateTo("dns/token/edit/" + record.Id);
    }
}