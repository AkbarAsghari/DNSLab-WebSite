@page "/dns/mytokens"

@inject IStringLocalizer<Resource> localizer
@inject IDNSRepository dnsRepository
@inject NavigationManager NavigationManager


<Modal @ref="DeleteModal">
    <Title>
        <label>@localizer["AreYouSureDel"]</label>
    </Title>
    <Body>
        <label>@localizer["TokenName"] : @deleteRcord.Name </label>
    </Body>
    <Footer>
        <button type="button" class="btn btn-warning" @onclick=@(()=>DeleteModal.Close())>@localizer["Cancel"]</button>
        <button type="submit" class="btn btn-danger" @onclick=@(()=>AcceptDelete()) disabled="@isInProgress">
            @if (isInProgress)
            {
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                <text>@localizer["Progressing"]...</text>
            }
            else
            {
                <text>@localizer["Delete"]</text>
            }
        </button>
    </Footer>
</Modal>

<Modal @ref="TokenDetailsModal" ModalSize="ModalSizeEnum.XLarge">
    <Title>
        <label>@localizer["Details"]</label>
    </Title>
    <Body>
        @if (token == null)
        {
            <Loading />
        }
        else
        {
            <p>@localizer["TokenName"] : @token.Name </p>
            <p>@localizer["TokenKey"] : <code>@token.Key</code></p>
            <p>برای بروزرسانی IP هاست نِیم های متصل به این توکن میتوانید بدون نیاز به نصب برنامه روی سیستم عامل خود ، دستورات زیر را در استارت آپ سیستم عامل خود قرار دهید قرار دهید</p>
            <hr />
            <p>فایل های زیر با پسوند .sh هستند برای بروزرسانی آی پی با تکرار 5 دقیقه که با دو کتابخانه wget و cURL در دسترس میباشد</p>
            <div class="row m-1 gap-2">
                <a class="col-lg-4 col-md-3 col-sm-12 btn btn-sm btn-primary" target="_blank" href="http://api.dnslab.ir/DNS/shell/wget?tokenId=@token.Id&key=@token.Key">دانلود فایل sh. (wget)</a>
                <a class="col-lg-4 col-md-3 col-sm-12 btn btn-sm btn-primary" target="_blank" href="http://api.dnslab.ir/DNS/shell/curl?tokenId=@token.Id&key=@token.Key">دانلود فایل sh. (curl)</a>
            </div>
            <hr />
            <p>فایل زیر با پسوند .ps1 هستند برای بروزرسانی آی پی با تکرار 5 دقیقه که با دو کتابخانه RestMethod در دسترس میباشد</p>
            <div class="row m-1">
                <a class="col-lg-4 col-md-3 col-sm-12 btn btn-sm btn-primary" target="_blank" href="http://api.dnslab.ir/DNS/powershell/restmethod?tokenId=@token.Id&key=@token.Key">دانلود فایل ps1. (RestMethod)</a>
            </div>
            <hr />

            <p>لینک بروزرسانی آی پی های توکن</p>
            <div class="row m-1">
                <code type="text" class="text-center link-primary">http://api.dnslab.ir/DNS/UDIBT?k=@token.Key</code>
                <p>این آدرس در هر جایی فراخوانی شود آی پی سیستم جایگزین خواهد شد</p>
            </div>
        }
    </Body>
    <Footer>
        <button type="button" class="btn btn-warning" @onclick=@(()=>TokenDetailsModal.Close())>@localizer["Close"]</button>
    </Footer>
</Modal>

<div class="card mb-4">
    <div class="card-header">@localizer["Tokens"]</div>
    <div class="card-body">
        <div class="mb-3">
            <a class="btn btn-primary" href="dns/createtoken">@localizer["CreateToken"]</a>
        </div>
        <div class="mb-3">
            @if (isLoading)
            {
                <Loading />
            }
            else if (tokenSummaries.Count() == 0)
            {
                <text>@localizer["ThereIsNoTokens"]</text>
            }
            else
            {
                @foreach (var item in tokenSummaries.OrderByDescending(x => x.CreateDate))
                {
                    <hr />
                    <div class="row">
                        <div class="row col-xxl-10 col-xl-9 col-8 align-self-center">
                            <div class="col-lg-3 col-sm-12 align-self-center">
                                <p class="m-0">@localizer["TokenName"] : @item.Name</p>
                            </div>
                            <div class="col-lg-4 col-sm-12 align-self-center">
                                <div class="row">
                                    <p class="small m-0">@localizer["CreateDate"] : @item.CreateDate.ToLocalizerString()</p>
                                    @if (@item.UpdateDate != null)
                                    {
                                        <p class="small m-0">@localizer["UpdateDate"] : @item.UpdateDate.Value.ToLocalizerString()</p>
                                    }
                                </div>
                            </div>
                            <div class="col-lg-5 col-sm-12 align-self-center">
                                <p class="m-0">@localizer["HostNamesCount"] <a class="btn btn-sm btn-success disabled">@item.HostNameCount</a></p>
                            </div>
                        </div>
                        <div class="col-xxl-2 col-xl-3 col-4 d-grid gap-2 d-xl-flex justify-content-md-end">
                            <button type="button" class="btn btn-outline-primary" @onclick=@(()=>OpenToken(item))>@localizer["Details"]</button>
                            <button type="button" class="btn btn-outline-warning" @onclick=@(()=>EditToken(item))>@localizer["Edit"]</button>
                            <button type="button" class="btn btn-outline-danger" @onclick=@(()=>DeleteToken(item))>@localizer["Delete"]</button>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
</div>


@code {
    IEnumerable<TokenSummaryDTO> tokenSummaries;

    Modal DeleteModal { get; set; }
    Modal TokenDetailsModal { get; set; }

    TokenSummaryDTO deleteRcord { get; set; } = new TokenSummaryDTO();
    TokenDTO token { get; set; }

    private bool isLoading = false;
    private bool isInProgress = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadTokensSummary();
    }

    private async Task LoadTokensSummary()
    {
        isLoading = true;
        tokenSummaries = await dnsRepository.GetTokenSummary();
        isLoading = false;
    }

    private async Task AcceptDelete()
    {
        isInProgress = true;
        if (deleteRcord != null)
        {
            if (await dnsRepository.DeleteToken(deleteRcord.Id))
            {
                await DeleteModal.Close();
                await LoadTokensSummary();
            }
        }
        deleteRcord = new TokenSummaryDTO();

        isInProgress = false;
    }

    private async Task OpenToken(TokenSummaryDTO record)
    {
        await TokenDetailsModal.Open();

        token = await dnsRepository.GetToken(record.Id);
    }
    private async Task DeleteToken(TokenSummaryDTO record)
    {
        deleteRcord = record;
        await DeleteModal.Open();
    }

    private void EditToken(TokenSummaryDTO record)
    {
        NavigationManager.NavigateTo("dns/token/edit/" + record.Id);
    }
}