@page "/dns/token/edit/{TokenId:guid}"

@inject IDNSRepository dnsRepository
@inject NavigationManager _navManager
@inject ToastService toastService
@inject IStringLocalizer<Resource> localizer

@attribute [Authorize]

@if (tokenAndDNS == null)
{
    <Loading />
}
else
{
    <TokenForm Title="@localizer["EditToken"]" OnValidSubmit="Update" TokenAndDNS="tokenAndDNS" HostSummariesAndChecked="HostSummariesAndChecked" />
}
@code {
    [Parameter] public Guid TokenId { get; set; }

    private TokenAndDNSDTO tokenAndDNS;
    private List<HostSummaryAndCheckedDTO> HostSummariesAndChecked;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            tokenAndDNS = await dnsRepository.GetToken(TokenId);
            var HostSummaries = await dnsRepository.GetHostSummaries();

            HostSummariesAndChecked = new List<HostSummaryAndCheckedDTO>();

            foreach (var item in HostSummaries)
                HostSummariesAndChecked.Add(new HostSummaryAndCheckedDTO
                    {
                        Id = item.Id,
                        Address = item.Address,
                        IsChecked = tokenAndDNS.HostNameIds.Contains(item.Id)
                    });

            await this.InvokeAsync(()=> StateHasChanged());
        }
    }

    public async Task Update()
    {
        if (await dnsRepository.UpdateTokensDomainNameSystems(tokenAndDNS))
        {
            _navManager.NavigateTo("dns/mytokens");
            toastService.ShowToast(localizer["TokenUpdated"], Enums.ToastLevel.Success);
        }
    }
}
