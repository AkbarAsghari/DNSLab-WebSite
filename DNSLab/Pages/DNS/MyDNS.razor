@page "/dns/mydns"

@inject IDNSRepository dnsRepository
@inject IStringLocalizer<Resource> localizer
@inject IJSRuntime JS
@inject NavigationManager NavigationManager

<PageTitle>@localizer["SEO_MyDNSTitle"]</PageTitle>
<meta name="description" content="@localizer["SEO_MyDNSDescription"]" />
<meta name="keywords" content="@localizer["SEO_MyDNSKeyWords"]" />

<Modal @ref="DeleteModal">
    <Title>
        <label>@localizer["AreYouSureDel"]</label>
    </Title>
    <Body>
        <label>@localizer["HostName"] : @deleteRcord.Name </label>
    </Body>
    <Footer>
        <button type="button" class="btn btn-warning" @onclick=@(()=>DeleteModal.Close())>@localizer["Cancel"]</button>
        <button type="submit" class="btn btn-danger" @onclick=@(()=>AcceptDelete()) disabled="@isInProgress">
            @if (isInProgress)
            {
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                <text>@localizer["Progressing"]...</text>
            }
            else
            {
                <text>@localizer["Delete"]</text>
            }
        </button>
    </Footer>
</Modal>

<div class="card mb-4">
    <div class="card-header">@localizer["HostNames"]</div>
    <div class="card-body">
        <div class="mb-3">
            <a class="btn btn-primary" href="dns/create">@localizer["CreateHostName"]</a>
        </div>
        <div class="mb-3">
            @if (isLoading)
            {
                <Loading />
            }
            else if (hostNames.Count == 0)
            {
                <text>@localizer["ThereIsNoHost"]</text>
            }
            else
            {
                @foreach (var item in hostNames)
                {
                    <hr />
                    <div class="row">
                        <div class="col-lg-10 col-8">
                            <div class="row">
                                <div class="col-md-4 col-xl-4">
                                    <a class="text-decoration-none" href="@($"http://{@item.Name}.{@item.Domain}")" target="_blank">
                                        <p><code>@item.Name</code>.@item.Domain</p>
                                    </a>
                                </div>
                                <div class="col-md-5 col-xl-6">
                                    <p class="d-inline">IP / Target </p>
                                    <a class="text-decoration-none">
                                        @switch ((DNSRecordTypeEnum)item.RecordType)
                                        {
                                            case DNSRecordTypeEnum.A:
                                                @item.IPv4Address
                                                break;
                                            case DNSRecordTypeEnum.AAAA:
                                                @item.IPv6Address
                                                break;
                                            case DNSRecordTypeEnum.CNAME:
                                                @item.HostNameAlias
                                                break;
                                        }
                                    </a>
                                </div>
                                <p class="col-md-3 col-xl-2">@localizer["Type"] <a class="btn btn-sm btn-dark disabled">@((DNSRecordTypeEnum)item.RecordType)</a></p>
                            </div>
                        </div>
                        <div class="col-lg-2 col-4 d-grid gap-2 d-xl-flex justify-content-md-end">
                            <button type="button" class="btn btn-outline-warning" @onclick=@(()=>EditHostName(item))>@localizer["Edit"]</button>
                            <button type="button" class="btn btn-outline-danger" @onclick=@(()=>DeleteHostName(item))>@localizer["Delete"]</button>
                        </div>
                    </div>

                }

                <hr />
                <Pagination CurrentPage=@paginationDTO.Page TotalAmountPages=totalAmountPages SelectedPage=SelectedPage />
            }
        </div>
    </div>
</div>


@code {
    List<HostNameDTO> hostNames;

    PaginationDTO paginationDTO = new PaginationDTO() { RecordsPerPage = 5 };

    Modal DeleteModal { get; set; }
    HostNameDTO deleteRcord { get; set; } = new HostNameDTO();

    private int totalAmountPages { get; set; }

    private bool isLoading = false;
    private bool isInProgress = false;

    private int ScreenWidth;

    protected override async Task OnInitializedAsync()
    {
        await LoadHostNames();

        var dimensions = await JS.GetDimensions();
        ScreenWidth = dimensions.Width;
    }

    private async Task LoadHostNames()
    {
        isLoading = true;
        var paginatedResponse = await dnsRepository.GetOwnHosts(paginationDTO);
        hostNames = paginatedResponse.Items.ToList();
        totalAmountPages = paginatedResponse.TotalAmountPages;
        isLoading = false;
    }

    private async Task SelectedPage(int page)
    {
        paginationDTO.Page = page;
        await LoadHostNames();
    }

    private async Task AcceptDelete()
    {
        isInProgress = true;
        if (deleteRcord != null)
        {
            if (await dnsRepository.DeleteHostName(deleteRcord.ID))
            {
                await DeleteModal.Close();
                await LoadHostNames();
            }
        }
        deleteRcord = new HostNameDTO();

        isInProgress = false;
    }

    private async Task DeleteHostName(HostNameDTO record)
    {
        deleteRcord = record;
        await DeleteModal.Open();
    }

    private async Task EditHostName(HostNameDTO record)
    {
        NavigationManager.NavigateTo("dns/edit/" + record.ID);
    }
}