@page "/dns/mydns"

@inject IDNSRepository dnsRepository
@inject IStringLocalizer<Resource> localizer
@inject IJSRuntime JS
@inject NavigationManager NavigationManager

@if (hostNames == null)
{
    <Loading />
}
else
{
    <Modal @ref="DeleteModal">
        <Title>
            <label>@localizer["AreYouSureDel"]</label>
        </Title>
        <Body>
            <label>@localizer["HostName"] : @deleteRcord.Name </label>
        </Body>
        <Footer>
            <BaseButtonComponent Caption=@localizer["Cancel"]
                             IsBussyCaption=@localizer["Progressing"]
                             Color=ColorEnum.Warning
                             OnClick=DeleteModal.Close></BaseButtonComponent>
            <BaseButtonComponent Caption=@localizer["Delete"]
                             IsBussyCaption=@localizer["Progressing"]
                             Color=ColorEnum.Danger
                             Icon=IconEnum.Trash
                             OnClick=AcceptDelete></BaseButtonComponent>
        </Footer>
    </Modal>
    <div class="card mb-4">
        <div class="card-header">@localizer["HostNames"]</div>
        <div class="card-body">
            <div class="mb-3">
                <a class="btn btn-primary" href="dns/create">@localizer["CreateHostName"]</a>
            </div>
            <div class="mb-3">
                @if (hostNames.Count == 0)
                {
                    <text>@localizer["ThereIsNoHost"]</text>
                }
                else
                {
                    @foreach (var item in hostNames)
                    {
                        <hr />
                        <div class="row">
                            <div class="col-lg-9 col-8">
                                <div class="row">
                                    <div class="col-md-4 col-xl-4">
                                        <a class="text-decoration-none" href="@($"http://{@item.Name}.{@item.Domain}")" target="_blank">
                                            <p><code>@item.Name</code>.@item.Domain</p>
                                        </a>
                                    </div>
                                    <div class="col-md-5 col-xl-6">
                                        <p class="d-inline">IP / Target </p>
                                        <a class="text-decoration-none">
                                            @switch ((DNSRecordTypeEnum)item.RecordType)
                                            {
                                                case DNSRecordTypeEnum.A:
                                                    @item.IPv4Address
                                                    break;
                                                case DNSRecordTypeEnum.AAAA:
                                                    @item.IPv6Address
                                                    break;
                                                case DNSRecordTypeEnum.CNAME:
                                                    @item.HostNameAlias
                                                    break;
                                            }
                                        </a>
                                    </div>
                                    <p class="col-md-3 col-xl-2">@localizer["Type"] <a class="btn btn-sm btn-dark disabled">@((DNSRecordTypeEnum)item.RecordType)</a></p>
                                </div>
                            </div>
                            <div class="col-lg-3 col-4 d-grid gap-2 d-xl-flex justify-content-md-end">
                                <BaseButtonComponent Caption=@localizer["Edit"]
                                         IsBussyCaption=@localizer["Progressing"]
                                         Color=ColorEnum.Warning
                                         IsOutLine=true
                                         Icon=IconEnum.Pencil
                                         OnClick=@(()=>EditHostName(item)) />
                                <BaseButtonComponent Caption=@localizer["Delete"]
                                         IsBussyCaption=@localizer["Progressing"]
                                         Color=ColorEnum.Danger
                                         IsOutLine=true
                                         Icon=IconEnum.Trash
                                         OnClick=@(()=>DeleteHostName(item)) />
                            </div>
                        </div>
                    }
                    <hr />
                    <Pagination CurrentPage=@paginationDTO.Page TotalAmountPages=totalAmountPages SelectedPage=SelectedPage />
                }
            </div>
        </div>
    </div>
}

@code {
    List<HostNameDTO> hostNames;

    PaginationDTO paginationDTO = new PaginationDTO() { RecordsPerPage = 5 };

    Modal DeleteModal { get; set; }
    HostNameDTO deleteRcord { get; set; } = new HostNameDTO();

    private int totalAmountPages { get; set; }

    private int ScreenWidth;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadHostNames();

            var dimensions = await JS.GetDimensions();
            ScreenWidth = dimensions.Width;
            StateHasChanged();
        }
    }

    private async Task LoadHostNames()
    {
        var paginatedResponse = await dnsRepository.GetOwnHosts(paginationDTO);
        hostNames = paginatedResponse.Items.ToList();
        totalAmountPages = paginatedResponse.TotalAmountPages;
    }

    private async Task SelectedPage(int page)
    {
        paginationDTO.Page = page;
        await LoadHostNames();
    }

    private async Task AcceptDelete()
    {
        if (deleteRcord != null)
        {
            if (await dnsRepository.DeleteHostName(deleteRcord.ID))
            {
                await DeleteModal.Close();
                await LoadHostNames();
            }
        }
        deleteRcord = new HostNameDTO();
    }

    private async Task DeleteHostName(HostNameDTO record)
    {
        deleteRcord = record;
        await DeleteModal.Open();
    }

    private async Task EditHostName(HostNameDTO record)
    {
        NavigationManager.NavigateTo("dns/edit/" + record.ID);
    }
}