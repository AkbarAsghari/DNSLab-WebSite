@page "/dns/mydns"

@inject IDNSRepository dnsRepository
@inject IStringLocalizer<Resource> localizer
@inject NavigationManager NavigationManager

@attribute [Authorize]

@if (hostNames == null)
{
    <Loading />
}
else
{
    <Modal @ref="DeleteModal">
        <Title>
            <BitLabel>@localizer["AreYouSureDel"]</BitLabel>
        </Title>
        <Body>
            <BitLabel>@localizer["HostName"] : @deleteRcord.Name </BitLabel>
        </Body>
        <Footer>
            <BaseButtonComponent Caption=@localizer["Cancel"]
                             IsBussyCaption=@localizer["Progressing"]
                             Color=ColorEnum.Warning
                             Icon=BitIconName.Cancel
                             OnClick=DeleteModal.Close></BaseButtonComponent>
            <BaseButtonComponent Caption=@localizer["Delete"]
                             IsBussyCaption=@localizer["Progressing"]
                             Color=ColorEnum.Danger
                             Icon=BitIconName.Delete
                             OnClick=AcceptDelete></BaseButtonComponent>
        </Footer>
    </Modal>

    <h4>@localizer["HostNames"]</h4>
    <div class="mb-3">
        <BaseNavigateButtonComponent Href="dns/create"
                                 Text="@(localizer["CreateHostName"])">
        </BaseNavigateButtonComponent>
    </div>
    <div class="mb-3">
        @if (hostNames.Count == 0)
        {
            <BitMessageBar MessageBarType="BitMessageBarType.Warning">
                <BitLabel>@localizer["ThereIsNoHost"]</BitLabel>
            </BitMessageBar>
            <BitMessageBar MessageBarType="BitMessageBarType.Info">
                <BitLabel>برای اطلاعات بیشتر <BitLink Target="_blank" Href="Support/Create-New-DNS">کلیک</BitLink> کنید</BitLabel>
            </BitMessageBar>
        }
        else
        {
            @foreach (var item in hostNames)
            {
                <hr class="m-1" />
                <div class="row">
                    <div class="col-lg-9 col-8">
                        <div class="row">
                            <div class="col">
                                <BitLink Class="text-decoration-none" Href="@($"http://{@item.Name}.{@item.Domain}")" Target="_blank">
                                    <BitLabel><code>@item.Name</code>.@item.Domain</BitLabel>
                                </BitLink>
                            </div>
                            <div class="col">
                                <BitLabel Class="d-inline">
                                    هدف :
                                    <BitLink Class="text-decoration-none">
                                        @switch ((DNSRecordTypeEnum)item.RecordType)
                                        {
                                            case DNSRecordTypeEnum.A:
                                                @item.IPv4Address
                                                break;
                                            case DNSRecordTypeEnum.AAAA:
                                                @item.IPv6Address
                                                break;
                                            case DNSRecordTypeEnum.CNAME:
                                                @item.HostNameAlias
                                                break;
                                            case DNSRecordTypeEnum.WebRedirect:
                                                @item.URLOrIp.MakeCut(20)
                                                break;
                                        }
                                    </BitLink>
                                </BitLabel>
                            </div>
                            <BitLabel Class="col">
                                @localizer["Type"] :
                                @((DNSRecordTypeEnum)item.RecordType +
                    ((DNSRecordTypeEnum)item.RecordType == DNSRecordTypeEnum.WebRedirect ?
                    " ("+item.RedirectHttpResponseStatusCode+")" :
                    String.Empty))
                            </BitLabel>
                        </div>
                    </div>
                    <div class="col">
                        <BaseButtonComponent Caption=@localizer["Edit"]
                                 IsBussyCaption=@localizer["Progressing"]
                                 Color=ColorEnum.Warning
                                 IsOutLine=true
                                 Icon=BitIconName.Edit
                                 OnClick=@(()=>EditHostName(item)) />
                        <BaseButtonComponent Caption=@localizer["Delete"]
                                 IsBussyCaption=@localizer["Progressing"]
                                 Color=ColorEnum.Danger
                                 IsOutLine=true
                                 Icon=BitIconName.Delete
                                 OnClick=@(()=>DeleteHostName(item)) />
                    </div>
                </div>
            }
            <hr />
            <Pagination CurrentPage=@paginationDTO.Page TotalAmountPages=totalAmountPages SelectedPage=SelectedPage />

            <BitMessageBar MessageBarType="BitMessageBarType.Success">
                <BitLabel>برای همسانسازی آی‌پی سیستم خود با سایت میتونید نسخه ویندوزی رو <BitLink Target="_blank" Href="Download/Win">دانلود</BitLink> کنید</BitLabel>
            </BitMessageBar>
            <BitMessageBar MessageBarType="BitMessageBarType.Info">
                <BitLabel>در صورتی که سیستم عامل شما ویندوزی نمیباشد یا نمیخواهید اپلیکیشن نصب نمایید <BitLink Target="_blank" Href="Support/Create-New-Token-For-DNS">این مطلب</BitLink> را مطالعه فرمایید</BitLabel>
            </BitMessageBar>
        }
    </div>
}

@code {
    List<HostNameDTO> hostNames;

    PaginationDTO paginationDTO = new PaginationDTO() { RecordsPerPage = 5 };

    Modal DeleteModal { get; set; }
    HostNameDTO deleteRcord { get; set; } = new HostNameDTO();

    private int totalAmountPages { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadHostNames();
            await this.InvokeAsync(() => StateHasChanged());
        }
    }

    private async Task LoadHostNames()
    {
        var paginatedResponse = await dnsRepository.GetOwnHosts(paginationDTO);
        hostNames = paginatedResponse.Items.ToList();
        totalAmountPages = paginatedResponse.TotalAmountPages;
    }

    private async Task SelectedPage(int page)
    {
        paginationDTO.Page = page;
        await LoadHostNames();
    }

    private async Task AcceptDelete()
    {
        if (deleteRcord != null)
        {
            if (await dnsRepository.DeleteHostName(deleteRcord.ID))
            {
                await DeleteModal.Close();
                await LoadHostNames();
            }
        }
        deleteRcord = new HostNameDTO();
    }

    private async Task DeleteHostName(HostNameDTO record)
    {
        deleteRcord = record;
        await DeleteModal.Open();
    }

    private async Task EditHostName(HostNameDTO record)
    {
        NavigationManager.NavigateTo("dns/edit/" + record.ID);
    }
}