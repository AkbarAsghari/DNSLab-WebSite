@using DNSLab.DTOs.DNS
@using DNSLab.Interfaces.Repository

@inject IDNSRepository dnsRepository

@inject IStringLocalizer<Resource> localizer

<EditForm Model="TokenAndDNS" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <div class="card mb-4">
        <div class="card-header">@Title</div>
        <div class="card-body">

            <!-- Form Row-->
            <div class="row gx-3 mb-3">
                <!-- Form Group (first name)-->
                <div class="col-12">
                    <label class="small mb-1">@localizer["TokenName"]</label>
                    <InputText class="form-control" placeholder="@localizer["EnterYourTokenName"]" @bind-Value="@TokenAndDNS.Name" required />
                    <ValidationMessage class="invalid-feedback" For="@(()=> TokenAndDNS.Name)" />
                </div>
                <!-- Form Group (last name)-->
                <div class="col-6">
                    @if (HostSummariesAndChecked != null)
                        @foreach (var item in HostSummariesAndChecked)
                        {
                            <div class="form-check form-switch">
                                <input class="form-check-input" type="checkbox" id="@item.Id.ToString().Replace("-",String.Empty)" @onchange="(e) => FilterChangedBrand(item, e)">
                                <label class="form-check-label" for="@item.Id.ToString().Replace("-",String.Empty)">@item.Address</label>
                            </div>
                        }
                </div>
            </div>
        </div>
    </div>
    <button type="submit" class="btn btn-primary" disabled="@IsInProgress">
        @if (IsInProgress)
        {
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
            <text>@localizer["Progressing"]...</text>
        }
        else
        {
            <text>@localizer["SaveChanges"]</text>
        }
    </button>
</EditForm>

@code {
    [Parameter] public bool IsInProgress { get; set; } = false;
    [Parameter] public string Title { get; set; } = String.Empty;
    [Parameter]
    public TokenAndDNSDTO TokenAndDNS { get; set; }


    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private List<HostSummaryAndCheckedDTO> HostSummariesAndChecked { get; set; } = new List<HostSummaryAndCheckedDTO>();

    protected override async Task OnInitializedAsync()
    {
        var HostSummaries = await dnsRepository.GetHostSummaries();

        foreach (var item in HostSummaries)
            HostSummariesAndChecked.Add(new HostSummaryAndCheckedDTO
                {
                    Id = item.Id,
                    Address = item.Address,
                    IsChecked = TokenAndDNS.HostNameIds.Contains(item.Id)
                });
    }

    public event Action<List<HostSummaryAndCheckedDTO>> FiltersChanged;

    private void FilterChangedBrand(HostSummaryAndCheckedDTO item, ChangeEventArgs e)
    {
        item.IsChecked = !item.IsChecked;
        if (item.IsChecked)
        {
            if (!TokenAndDNS.HostNameIds.Any(x => x == item.Id))
                TokenAndDNS.HostNameIds.Add(item.Id);
        }
        else
        {
            if (TokenAndDNS.HostNameIds.Any(x => x == item.Id))
                TokenAndDNS.HostNameIds.Remove(item.Id);
        }
        FiltersChanged?.Invoke(HostSummariesAndChecked);
    }
}