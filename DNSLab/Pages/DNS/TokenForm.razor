@inject IDNSRepository dnsRepository

@inject IStringLocalizer<Resource> localizer

<EditForm Model="TokenAndDNS" Context=TokenContext>
    <DataAnnotationsValidator />
    <div class="card mb-4">
        <div class="card-header"><BitLabel>@Title</BitLabel></div>
        <div class="card-body">
            <div class="row gx-3 mb-3">
                <div class="col-lg-4 col-md-6 col-sm-12">
                    <BitTextField Label="@localizer["TokenName"]" Placeholder="@localizer["EnterYourTokenName"]" @bind-Value="@TokenAndDNS.Name" IsRequired />
                </div>
                <hr class="my-2" />
                <div class="col-12">
                    <BitLabel>@localizer["SelectDNSTitle"]</BitLabel>
                    <BitMessageBar MessageBarType="BitMessageBarType.Info">
                        <BitLabel>@localizer["SelectDNSDescription"]</BitLabel>
                    </BitMessageBar>
                    <div class="row g-2">
                        @if (HostSummariesAndChecked == null)
                        {
                            <Loading IsInTop="false" />
                        }
                        else if (HostSummariesAndChecked.Count == 0)
                        {
                            <BitMessageBar MessageBarType="BitMessageBarType.Warning">
                                <BitLabel>@localizer["YouHaveNoActiveDNS"] <BitLink Href="dns/create">@localizer["Click"]</BitLink></BitLabel>
                            </BitMessageBar>
                        }
                        else
                        {
                            @foreach (var item in HostSummariesAndChecked)
                            {
                                <div class="col-lg-4 col-md-6 col-sm-12">
                                    <div class="border p-3">
                                        <div class="form-check form-switch">
                                            <input class="form-check-input" type="checkbox" id="@item.Id.ToString().Replace("-",String.Empty)" checked="@item.IsChecked" @onchange="(e) => FilterChangedBrand(item, e)">
                                            <BitLabel For="@item.Id.ToString().Replace("-",String.Empty)">@item.Address</BitLabel>
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>
            <BaseButtonComponent Caption=@localizer["SaveChanges"]
                                 IsBussyCaption=@localizer["Progressing"]
                                 Color=ColorEnum.Primary
                                 Icon=BitIconName.Save
                                 EditContext=TokenContext
                                 OnClick=OnValidSubmit></BaseButtonComponent>
        </div>
    </div>

</EditForm>

@code {
    [Parameter] public string Title { get; set; } = String.Empty;
    [Parameter] public TokenAndDNSDTO TokenAndDNS { get; set; }
    [Parameter] public List<HostSummaryAndCheckedDTO> HostSummariesAndChecked { get; set; }


    [Parameter] public EventCallback OnValidSubmit { get; set; }


    public event Action<List<HostSummaryAndCheckedDTO>> FiltersChanged;

    private void FilterChangedBrand(HostSummaryAndCheckedDTO item, ChangeEventArgs e)
    {
        item.IsChecked = !item.IsChecked;
        if (item.IsChecked)
        {
            if (!TokenAndDNS.HostNameIds.Any(x => x == item.Id))
                TokenAndDNS.HostNameIds.Add(item.Id);
        }
        else
        {
            if (TokenAndDNS.HostNameIds.Any(x => x == item.Id))
                TokenAndDNS.HostNameIds.Remove(item.Id);
        }
        FiltersChanged?.Invoke(HostSummariesAndChecked);
    }
}