@page "/Comment/MyComments"

@inject ICommentRepository commentRepository
@inject IStringLocalizer<Resource> localizer
@inject NavigationManager NavigationManager

<Modal @ref="DeleteModal">
    <Title>
        <label>@localizer["AreYouSureDel"]</label>
    </Title>
    <Body>
        <label>@localizer["ComentText"] : @deleteRcord.Text </label>
    </Body>
    <Footer>
        <button type="button" class="btn btn-warning" @onclick=@(()=>DeleteModal.Close())>@localizer["Cancel"]</button>
        <button type="submit" class="btn btn-danger" @onclick=@(()=>AcceptDelete()) disabled="@isInProgress">
            @if (isInProgress)
            {
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                <text>@localizer["Progressing"]...</text>
            }
            else
            {
                <text>@localizer["Delete"]</text>
            }
        </button>
    </Footer>
</Modal>

<div class="card mb-4">
    <div class="card-header">@localizer["MyComments"]</div>
    <div class="card-body">
        <div class="mb-3">
            <a class="btn btn-primary" href="Comment/Create">@localizer["CreateNewComment"]</a>
        </div>
        <div class="mb-3">
            @if (isLoading)
            {
                <Loading />
            }
            else if (myComments.Count() == 0)
            {
                <text>@localizer["ThereIsNoComment"]</text>
            }
            else
            {
                @foreach (var item in myComments)
                {
                    <hr />
                    <div class="row">
                        <div class="row col-lg-10 col-8">
                            <div class="col-lg-6 col-sm-12 align-self-center">
                                <p class="m-0">@localizer["CommentText"] : @(item.Text.Length > 25 ? $"{item.Text.Substring(0,25)}..." : item.Text)</p>
                            </div>
                            <div class="col-lg-4 col-sm-12 align-self-center">
                                <div class="row">
                                    <p class="small m-0">@localizer["CreateDate"] : @item.CreateDate.ToLocalizerString()</p>
                                    @if (@item.UpdateDate != null)
                                    {
                                        <p class="small m-0">@localizer["UpdateDate"] : @item.UpdateDate.Value.ToLocalizerString()</p>
                                    }
                                </div>
                            </div>
                            <div class="col-lg-2 col-sm-12 align-self-center">
                                <p class="m-0">
                                    @switch (@item.IsApproved)
                                    {
                                        case null:
                                            <a class="btn btn-sm btn-secondary disabled">@localizer["NotChecked"]</a>
                                            break;
                                        case true:
                                            <a class="btn btn-sm btn-success disabled">@localizer["Approved"]</a>
                                            break;
                                        case false:
                                            <a class="btn btn-sm btn-danger disabled">@localizer["Disapproval"]</a>
                                            break;
                                    }
                                </p>
                            </div>
                        </div>
                        <div class="col-lg-2 col-4 d-grid gap-2 d-xl-flex justify-content-md-end">
                            <button type="button" class="btn btn-outline-warning" @onclick=@(()=>EditComment(item))>@localizer["Edit"]</button>
                            <button type="button" class="btn btn-outline-danger" @onclick=@(()=>DeleteComment(item))>@localizer["Delete"]</button>
                        </div>
                    </div>

                }
            }
        </div>
    </div>
</div>


@code {
    IEnumerable<CommentDTO> myComments;
    Modal DeleteModal { get; set; }
    CommentDTO deleteRcord { get; set; } = new();
    private bool isLoading = false;
    private bool isInProgress = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadComments();
    }

    private async Task LoadComments()
    {
        isLoading = true;
        myComments = await commentRepository.GetMyComments();
        isLoading = false;
    }

    private async Task AcceptDelete()
    {
        isInProgress = true;
        if (deleteRcord != null)
        {
            if (await commentRepository.DeleteComment(deleteRcord.Id))
            {
                await DeleteModal.Close();
                await LoadComments();
            }
        }
        deleteRcord = new CommentDTO();

        isInProgress = false;
    }

    private async Task DeleteComment(CommentDTO record)
    {
        deleteRcord = record;
        await DeleteModal.Open();
    }

    private async Task EditComment(CommentDTO record)
    {
        NavigationManager.NavigateTo("Comment/edit/" + record.Id);
    }
}
