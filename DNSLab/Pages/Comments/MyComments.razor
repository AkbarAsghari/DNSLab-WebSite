@page "/Comment/MyComments"

@inject ICommentRepository commentRepository
@inject IStringLocalizer<Resource> localizer
@inject NavigationManager NavigationManager

@attribute [Authorize]

@if (myComments == null)
{
    <Loading />
}
else
{
    <Modal @ref="DeleteModal">
        <Title>
            <BitLabel>@localizer["AreYouSureDel"]</BitLabel>
        </Title>
        <Body>
            <BitLabel>@localizer["CommentText"] : @deleteRcord.Text </BitLabel>
        </Body>
        <Footer>
            <BaseButtonComponent Caption=@localizer["Cancel"]
                             IsBussyCaption=@localizer["Progressing"]
                             Icon=BitIconName.Cancel
                             OnClick=DeleteModal.Close></BaseButtonComponent>
            <BaseButtonComponent Caption=@localizer["Delete"]
                             IsBussyCaption=@localizer["Progressing"]
                             Icon=BitIconName.Delete
                             OnClick=AcceptDelete></BaseButtonComponent>
        </Footer>
    </Modal>


    <Modal @ref="RepliesModal" ModalSize="ModalSizeEnum.Large">
        <Title>
            <BitLabel>پاسخ ها</BitLabel>
        </Title>
        <Body>
            @if (commentReplies != null)
            {
                @foreach (var item in commentReplies)
                {
                    <CommentItem FullComment="item" />
                }
            }
        </Body>
        <Footer>
            <BaseButtonComponent Caption=@localizer["Cancel"]
                             IsBussyCaption=@localizer["Progressing"]
                             Icon=BitIconName.Cancel
                             OnClick=RepliesModal.Close></BaseButtonComponent>
        </Footer>
    </Modal>



    <h4>@localizer["MyComments"]</h4>
    <div class="mb-3">
        <BaseNavigateButtonComponent Href="Comment/Create"
                                 Text="@(localizer["CreateNewComment"])">
        </BaseNavigateButtonComponent>
    </div>
    <div class="mb-3">
        @if (myComments.Count() == 0)
        {
            <BitLabel>@localizer["ThereIsNoComment"]</BitLabel>
        }
        else
        {
            @foreach (var item in myComments)
            {
                <hr />
                <div class="row">
                    <div class="row col-lg-9 col-7 align-items-center">
                        <div class="col-lg-4 col-sm-12">
                            <BitLabel Class="m-0">@localizer["CommentText"] : @item.Text.MakeCut(23)</BitLabel>
                        </div>
                        <div class="col-lg-5 col-sm-12">
                            <BitLabel Class="small m-0">@localizer["CreateDate"] : @item.CreateDate.ToLocalizerString().EnglishToPersianNumbers()</BitLabel>
                            @if (@item.UpdateDate != null)
                            {
                                <BitLabel Class="small m-0">@localizer["UpdateDate"] : @item.UpdateDate.Value.ToLocalizerString().EnglishToPersianNumbers()</BitLabel>
                            }
                        </div>
                        <div class="col-lg-3 col-sm-12">
                            <BitLabel>
                                وضعیت :
                                @switch (@item.IsApproved)
                                {
                                    case null:
                                        @localizer["NotChecked"]
                                        break;
                                    case true:
                                        @localizer["Approved"]
                                        break;
                                    case false:
                                        @localizer["Disapproval"]
                                        break;
                                }
                            </BitLabel>
                        </div>
                    </div>
                    <div class="col">
                        <BaseButtonComponent Caption=@localizer["Edit"]
                                 IsBussyCaption=@localizer["Progressing"]
                                 IsOutLine=true
                                 Color=ColorEnum.Warning
                                 Icon=BitIconName.Edit
                                 OnClick=@(()=>EditComment(item))></BaseButtonComponent>
                        <BaseButtonComponent Caption=@localizer["Delete"]
                                 IsBussyCaption=@localizer["Progressing"]
                                 IsOutLine=true
                                 Color=ColorEnum.Danger
                                 Icon=BitIconName.Delete
                                 OnClick=@(()=>DeleteComment(item))></BaseButtonComponent>
                        @if (item.RepliesCount > 0)
                        {
                            <BaseButtonComponent Caption=@localizer["Replies"]
                                 IsBussyCaption=@localizer["Progressing"]
                                 IsOutLine=true
                                 Color=ColorEnum.Success
                                 Icon=BitIconName.OfficeChat
                                 OnClick=@(()=>GetRepliesModal(item))></BaseButtonComponent>
                        }
                    </div>
                </div>

            }
        }
    </div>
}



@code {
    IEnumerable<FullCommentDTO> myComments;
    IEnumerable<FullCommentDTO> commentReplies;

    Modal DeleteModal { get; set; }
    Modal RepliesModal { get; set; }

    CommentDTO deleteRcord { get; set; } = new();
    private bool isLoading = false;
    private bool isInProgress = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadComments();
            await this.InvokeAsync(() => StateHasChanged());
        }
    }

    private async Task LoadComments()
    {
        isLoading = true;
        myComments = await commentRepository.GetMyComments();
        isLoading = false;
    }

    private async Task AcceptDelete()
    {
        isInProgress = true;
        if (deleteRcord != null)
        {
            if (await commentRepository.DeleteComment(deleteRcord.Id))
            {
                await DeleteModal.Close();
                await LoadComments();
            }
        }
        deleteRcord = new CommentDTO();

        isInProgress = false;
    }

    private async Task GetRepliesModal(CommentDTO record)
    {
        commentReplies = await commentRepository.GetCommentReplies(record.Id);
        await RepliesModal.Open();
    }

    private async Task DeleteComment(CommentDTO record)
    {
        deleteRcord = record;
        await DeleteModal.Open();
    }

    private async Task EditComment(CommentDTO record)
    {
        NavigationManager.NavigateTo("Comment/edit/" + record.Id);
    }
}
