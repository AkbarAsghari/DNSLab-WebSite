@inject IStringLocalizer<Resource> localizer

@if (ChangeLog == null)
{
    <Loading />
}
else
{
    <EditForm Model="ChangeLog" Context=ChangeLogContext>
        <DataAnnotationsValidator />
        <div class="card mb-4">
            <div class="card-header"><BitLabel>@Title</BitLabel></div>
            <div class="card-body">
                <div class="row gx-3 mb-3">
                    <div class="col-lg-4">
                        <BitTextField Label="@localizer["ChangeTitle"]" @bind-Value=ChangeLog.Title />
                    </div>
                    <div class="col-lg-4">
                        <BitDatePicker Label="@localizer["ReleaseDate"]" @bind-Value=selectedDate />
                    </div>
                    <div class="col-lg-4">
                        <BitTextField Label="@localizer["InformationLink"]" Class="dir-ltr" @bind-Value=ChangeLog.InformationLink />
                    </div>
                    <div class="col-12">
                        <label class="mb-1">@localizer["Description"]</label>
                        <TextEditor @bind-Value=ChangeLog.Description></TextEditor>
                    </div>
                </div>
                <BaseButtonComponent Caption=@localizer["Save"]
                                 IsBussyCaption=@localizer["Progressing"]
                                 Color=ColorEnum.Primary
                                 Icon=BitIconName.Save
                                 EditContext=ChangeLogContext
                                 OnClick=OnValidSubmit></BaseButtonComponent>
                <BaseNavigateButtonComponent Text="@localizer["Cancel"]"
                                         Href="ChangeLogs/All"
                                         Icon="BitIconName.Cancel">
                </BaseNavigateButtonComponent>
            </div>
        </div>
    </EditForm>
}
@code {

    DateTimeOffset? selectedDate
    {
        get
        {
            if (ChangeLog.ReleaseDate == default)
                return DateTime.UtcNow;
            return DateTimeOffset.Parse(ChangeLog.ReleaseDate.ToString());
        }
        set
        {
            if (value.HasValue)
                ChangeLog.ReleaseDate = value.Value.LocalDateTime;
        }
    }

    [Parameter] public string Title { get; set; } = String.Empty;
    [Parameter] public ChangeLogDTO ChangeLog { get; set; } = null;
    [Parameter] public EventCallback OnValidSubmit { get; set; }
}
