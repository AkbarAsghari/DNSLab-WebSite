@inject IDNSRepository _DNSRepository
@page "/Report/IPChangesChart"
@using System.Drawing

@attribute [Authorize]

<div class="container p-5 bg-body rounded shadow-sm article">
    <h1>نمودار تعداد دفعات تغییر IP در ۳۰ روز اخیر</h1>
    <BitLabel>در این فرم شما تعداد دفعات تغییرات آی‌پی رکورد های DNS Host (A) به تفکیک روز را در قالب نمودار مشاهده خواهید نمود.</BitLabel>
    <hr />
    @if (_stackedBarChartConfigExample == null)
    {
        <Loading />
    }
    else
    {
        <div>
            <BitChart Config="_stackedBarChartConfigExample" />
        </div>
    }
</div>

@code {
    private BitChartBarConfig _stackedBarChartConfigExample;

    protected override async Task OnInitializedAsync()
    {
        await InitlineChartExample();
    }

    private async Task InitlineChartExample()
    {
        var last30DayIPChangesCount = await _DNSRepository.GetLast30DayIPChangesCount();

        _stackedBarChartConfigExample = new BitChartBarConfig
            {
                Options = new BitChartBarOptions
                {
                    Responsive = true,
                    MaintainAspectRatio = false,
                    AspectRatio = 0.8,
                    Title = new BitChartOptionsTitle
                    {
                        Display = true,
                        Text = "نمودار تعداد دفعات تغییرات آی پی به تفکیک روز",
                        FontFamily = "vazir-regular",
                    },
                    Tooltips = new BitChartTooltips
                    {
                        Mode = BitChartInteractionMode.Nearest,
                        Intersect = true,
                        TitleFontFamily = "vazir-regular",
                    },
                    Hover = new BitChartHover
                    {
                        Mode = BitChartInteractionMode.Nearest,
                        Intersect = true
                    },
                    Scales = new BitChartBarScales
                    {
                        XAxes = new List<BitChartCartesianAxis>
                            {
                                new BitChartBarCategoryAxis
                                {
                                    Stacked = true,
                                }
                            },
                        YAxes = new List<BitChartCartesianAxis>
                            {
                                new BitChartBarLinearCartesianAxis
                                {
                                    Stacked = true
                                }
                            }
                    }
                }
            };

        for (int i = -30; i <= 0; i++)
        {
            var date = DateTime.UtcNow.AddDays(i).Date;

            foreach (var item in last30DayIPChangesCount)
            {
                if (!item.DateAndCount.Any(x => x.Key == date))
                    item.DateAndCount.Add(date, 0);
            }
            _stackedBarChartConfigExample.Data.Labels.Add(date.ToLocalizerString().Substring(0, 10));
        }

        var haveChangeRecords = last30DayIPChangesCount.Where(x => x.DateAndCount.Any(x => x.Value > 0));

        Color[] colors = new Color[] { Color.MediumVioletRed, Color.MediumSpringGreen, Color.DeepSkyBlue, Color.Coral, Color.OliveDrab, Color.DimGray, Color.Indigo };
        for (int i = 0; i < haveChangeRecords.Count(); i++)
        {
            _stackedBarChartConfigExample.Data.Datasets.Add(new BitChartBarDataset<int>(haveChangeRecords.ElementAt(i).DateAndCount.OrderBy(x => x.Key).Select(x => x.Value).AsEnumerable())
                {
                    Label = haveChangeRecords.ElementAt(i).HostName,
                    BackgroundColor = BitChartColorUtil.FromDrawingColor(colors[i])
                });
        }
    }
}
