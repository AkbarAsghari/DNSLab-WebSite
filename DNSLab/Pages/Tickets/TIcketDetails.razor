@page "/Ticket/Details/{TicketId:guid}"
@using DNSLab.DTOs.Ticket
@inject ITicketRepository ticketRepository
@inject IStringLocalizer<Resource> localizer
@inject AuthenticationStateProvider auth
@inject IJSRuntime jsRuntime
@attribute [Authorize]

@if (messages == null)
{
    <Loading IsInTop=true />
}
else
{
    <EditForm Model="Message" Context="TicketDetails">
        <DataAnnotationsValidator />
        <div class="card mb-4">
            <div class="card-header"><BitLabel>@localizer["TicketTitle"] : @ticket.Title</BitLabel></div>
            <div class="card-body">
                <div class="row gx-3 mb-3">
                    <ul id="chat">
                        @foreach (var item in messages.OrderBy(x => x.CreateDate))
                        {
                            @if (CurrentUserId == item.UserId)
                            {
                                <li class="me">
                                    <div class="small">
                                        @item.CreateDate.CalcRelativeTime()
                                    </div>
                                    <div class="message">
                                        @item.Text
                                    </div>
                                </li>
                            }
                            else
                            {
                                <li class="you">
                                    <div class="small">
                                        @item.CreateDate.CalcRelativeTime()
                                    </div>
                                    <div class="message">
                                        @item.Text
                                    </div>
                                </li>
                            }
                        }
                    </ul>
                </div>
                <hr>
                <BitTextField Label="@localizer["TicketText"]"
                          IsMultiline=true class="form-control"
                          Placeholder="@(localizer["TicketText"] + "...")"
                          Rows="7"
                          @bind-Value="Message.Text"
                          MaxLength="@MAX_TEXT_COUNT" />
                <div class="mb-3 gap-2">
                    <BaseButtonComponent Caption=@localizer["Send"]
                                     IsBussyCaption=@localizer["Progressing"]
                                     Color=ColorEnum.Primary
                                     Icon=BitIconName.Send
                                     EditContext="TicketDetails"
                                     OnClick=SendTicket></BaseButtonComponent>
                    <BaseNavigateButtonComponent Text="انصراف"
                                             Href="Ticket/MyTickets"
                                             Icon=BitIconName.Cancel>
                    </BaseNavigateButtonComponent>
                </div>
            </div>
        </div>
    </EditForm>
}



@code {
    [Parameter] public Guid TicketId { get; set; }
    const int MAX_TEXT_COUNT = 2000;
    SendMessageDTO Message { get; set; } = new SendMessageDTO { Text = String.Empty };

    ICollection<MessageDTO> messages;
    TicketDTO ticket;

    Guid CurrentUserId;

    async Task SendTicket()
    {
        Message.TicketId = TicketId;

        if (await ticketRepository.SendMessage(Message))
        {
            messages.Add(new MessageDTO
                {
                    UserId = CurrentUserId,
                    CreateDate = DateTime.UtcNow,
                    Text = Message.Text,
                });

            Message.Text = String.Empty;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        ticket = await ticketRepository.Get(TicketId);
        messages = (await ticketRepository.GetTicketMessages(TicketId)).ToList();

        CurrentUserId = Guid.Parse((await auth.GetAuthenticationStateAsync()).User.Identities.FirstOrDefault()!.Claims.FirstOrDefault(x => x.Type.ToLower() == "nameid")!.Value);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await jsRuntime.InvokeVoidAsync("Scroll");
    }


}
