@page "/Dashboard"

@inject IAccountRepository accountReository
@inject IDNSRepository dnsRepository
@inject AuthenticationStateProvider auth

@attribute [Authorize]

<div class="row">
    <div class="col-lg-4 col-md-6">
        @if (isLoadingActiveDNSCount)
        {
            <BitProgressIndicator BarHeight="20" />
        }
        else
        {
            <div class="card bg-light h-100">
                <div class="card-header">
                    <BitLabel Class="alert-heading text-center">تعداد هاست نِیم ها</BitLabel>
                </div>
                <div class="card-body">
                    <h2 class="text-center">@activeDNSCount.ToString().EnglishToPersianNumbers()</h2>
                    <BitLabel Class="text-center">
                        هاست نِیم بصورت فعال یافت شد
                    </BitLabel>
                </div>
                <div class="card-footer">
                    <BitLabel Class="text-center">
                        <BitLink Href="dns/mydns">برای مدیریت کلیک کنید</BitLink>
                    </BitLabel>
                </div>
            </div>
        }
    </div>
    <div class="col-lg-4 col-md-6">
        @if (isLoadingLast24HoursChangesCount)
        {
            <BitProgressIndicator BarHeight="20" />
        }
        else
        {
            <div class="card bg-light h-100">
                <div class="card-header">
                    <BitLabel Class="alert-heading text-center">تعداد بروزرسانی ها</BitLabel>
                </div>
                <div class="card-body">
                    <h2 class="text-center">@last24HoursChangesCount.ToString().EnglishToPersianNumbers()</h2>
                    <BitLabel Class="text-center">
                        دفعه در ۲۴ ساعت گذشته هاست نِیم های شما تغییر کرده‌اند
                    </BitLabel>
                </div>
                <div class="card-footer">
                    <BitLabel Class="text-center">
                        <BitLink Href="/DNS/Histories">برای نمایش تاریخچه کلیک کنید</BitLink>
                    </BitLabel>
                </div>
            </div>
        }
    </div>
    <div class="col-lg-4 col-md-6">
        @if (isLoadingLast24HoursChangesCount)
        {
            <BitProgressIndicator BarHeight="20" />
        }
        else
        {
            <div class="card bg-light h-100">
                <div class="card-header">
                    <BitLabel Class="alert-heading text-center">تعداد کاربران سایت</BitLabel>
                </div>
                <div class="card-body">
                    <h2 class="text-center">@usersCount.ToString().EnglishToPersianNumbers()</h2>
                    <BitLabel Class="text-center">نفر تاکنون در سایت ثبت نام کرده‌اند</BitLabel>
                </div>
                <div class="card-footer">
                    <AuthorizeView Roles="Admin" Context="adminContext">
                        <BitLabel Class="text-center">
                            <BitLink Href="/User/AllUsers">برای نمایش کاربران کلیک کنید</BitLink>
                        </BitLabel>
                    </AuthorizeView>
                </div>
            </div>
        }
    </div>
</div>

@if (!isLoadingActiveDNSCount && activeDNSCount == 0)
{
    <BitMessageBar MessageBarType="BitMessageBarType.Warning">
        <BitLabel>شما تا کنون هیچ هاست نِیمی ثبت نکرده‌اید برای ایجاد هاست نِیم <BitLink Href="DNS/MyDNS">کلیک</BitLink> کنید.</BitLabel>
    </BitMessageBar>
}

@code {
    private bool isLoadingUsersCount = true;
    private bool isLoadingActiveDNSCount = true;
    private bool isLoadingLast24HoursChangesCount = true;

    int usersCount = 0;
    int activeDNSCount = 0;
    int last24HoursChangesCount = 0;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var user = (await auth.GetAuthenticationStateAsync()).User;
            if (user.Identity?.IsAuthenticated == true)
            {
                await Task.WhenAll(LoadUsersCount(), LoadActiveDNSCount(), LoadLast24HoursChangesCount());
                await this.InvokeAsync(() => StateHasChanged());
            }
        }
    }

    private async Task LoadUsersCount()
    {
        isLoadingUsersCount = true;
        usersCount = await accountReository.UsersCount();
        isLoadingUsersCount = false;
    }

    private async Task LoadActiveDNSCount()
    {
        isLoadingActiveDNSCount = true;
        activeDNSCount = await dnsRepository.GetActiveDNSCount();
        isLoadingActiveDNSCount = false;
    }

    private async Task LoadLast24HoursChangesCount()
    {
        isLoadingLast24HoursChangesCount = true;
        last24HoursChangesCount = await dnsRepository.GetLast24HoursChangesCount();
        isLoadingLast24HoursChangesCount = false;
    }
}