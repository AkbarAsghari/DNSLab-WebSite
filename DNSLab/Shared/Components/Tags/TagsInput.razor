@using System;
@using System.Collections.Generic;
@using System.Linq;
@using System.Text.RegularExpressions;

<div class="bit-txt bit-txt-fluent bit-txt-enabled-fluent bit-txt-required-fluent">
    <div class="bit-txt-wrapper">
        <BitLabel>تگ ها</BitLabel>
        <div class="bit-txt-field-grp">
            <input class="txt-field"
                   placeholder="با ( ویرگول ) جدا کنید"
                   autocomplete="off"
                   @bind-value="Value"
                   @bind-value:event="oninput"
                   @onkeyup="AddTags" />
        </div>
    </div>
</div>
@if (IsContainSpecialCharacter)
{
    <BitMessageBar MessageBarType="BitMessageBarType.SevereWarning">
        <BitLabel Class="text-left m-0 p-1">امکان درج کاراکتر های خاص وجود ندارد</BitLabel>
    </BitMessageBar>
}
<div class="suggestion-container">
    <div class="tagsinput">
        @if (Tags != null && Tags.Any())
        {
            @foreach (var tag in Tags)
            {
                <span class="tag">
                    <span class="tag-text">@tag</span>
                    <span class="tag-remove" @onclick="() => DeleteTag(tag)" />
                </span>
            }
        }
    </div>
</div>
@code {

    protected string Value { get; set; }
    protected bool MenuVisibility { get; set; }
    protected bool IsContainSpecialCharacter { get; set; }
    [Parameter] public List<string> Tags { get; set; }

    protected void AddTags(KeyboardEventArgs eventArgs)
    {
        if (Tags == null)
            Tags = new List<string>();

        IsContainSpecialCharacter = false;

        if (!String.IsNullOrEmpty(Value))
        {
            if (eventArgs.Key.Equals(",") || Value.EndsWith(",") || eventArgs.Key.Equals("،") || Value.EndsWith("،"))
            {
                Value = Value.Replace(",", String.Empty).Replace("،", String.Empty).Trim();

                if (!String.IsNullOrEmpty(Value)
                && !Tags.Exists(t => t.Equals(Value, StringComparison.CurrentCultureIgnoreCase)))
                {
                    Tags.Add(Value);
                }

                Value = string.Empty;
            }
        }
    }

    protected void DeleteTag(string value)
    {
        if (String.IsNullOrEmpty(value)) return;

        var tag = Tags.FirstOrDefault(t => t == value);
        if (tag == null) return;

        Tags.Remove(tag);
    }
    }
