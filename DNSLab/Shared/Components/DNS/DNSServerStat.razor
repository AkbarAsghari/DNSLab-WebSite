@using System.Drawing;
@using DNSLab.DTOs.Statics;
@using DNSLab.Helper.Utilities;
@attribute [Authorize(Roles = "Admin")]
@inject IStaticsRepository _StaticRepository

@if (_StatResponse == null)
{
    <Loading />
}
else
{
    <div class="row">
        <BitDropDown Class="col-auto" Style="width:200px" Label="بازه"
                 DefaultValue="@StatType.ToString()"
                 Items="GetStatTypeItems()"
                 ValueChanged="StatTypeOnChange">
        </BitDropDown>
        @if (StatType == StatTypeEnum.Custom)
        {
            <BitDateRangePicker Class="col-auto" Label="بازه زمانی مورد نظر خود را انتخاب کنید"
                        @ref=rangeDatePicker
                        ValueChanged="GenerateReport">
            </BitDateRangePicker>
        }
    </div>


    <div class="stats-panel">
        <div class="stats-item total-queries">
            <div class="number">@_StatResponse.Response.Stats.TotalQueries.ToString("N0").EnglishToPersianNumbers()</div>
            <div class="percentage">@GetPrecentage(_StatResponse.Response.Stats.TotalQueries,_StatResponse.Response.Stats.TotalQueries)</div>
            <div class="title">Total Queries</div>
        </div>

        <div class="stats-item no-error">
            <div class="number">@_StatResponse.Response.Stats.TotalNoError.ToString("N0").EnglishToPersianNumbers()</div>
            <div class="percentage">@GetPrecentage(_StatResponse.Response.Stats.TotalQueries,_StatResponse.Response.Stats.TotalNoError)</div>
            <div class="title">No Error</div>
        </div>

        <div class="stats-item server-failure">
            <div class="number">@_StatResponse.Response.Stats.TotalServerFailure.ToString("N0").EnglishToPersianNumbers()</div>
            <div class="percentage">@GetPrecentage(_StatResponse.Response.Stats.TotalQueries,_StatResponse.Response.Stats.TotalServerFailure)</div>
            <div class="title">Server Failure</div>
        </div>

        <div class="stats-item name-error">
            <div class="number">@_StatResponse.Response.Stats.TotalNxDomain.ToString("N0").EnglishToPersianNumbers()</div>
            <div class="percentage">@GetPrecentage(_StatResponse.Response.Stats.TotalQueries,_StatResponse.Response.Stats.TotalNxDomain)</div>
            <div class="title">NX Domain</div>
        </div>

        <div class="stats-item refused">
            <div class="number">@_StatResponse.Response.Stats.TotalRefused.ToString("N0").EnglishToPersianNumbers()</div>
            <div class="percentage">@GetPrecentage(_StatResponse.Response.Stats.TotalQueries,_StatResponse.Response.Stats.TotalRefused)</div>
            <div class="title">Refused</div>
        </div>

        <div class="stats-item auth-hit">
            <div class="number">@_StatResponse.Response.Stats.TotalAuthoritative.ToString("N0").EnglishToPersianNumbers()</div>
            <div class="percentage">@GetPrecentage(_StatResponse.Response.Stats.TotalQueries,_StatResponse.Response.Stats.TotalAuthoritative)</div>
            <div class="title">Authoritative</div>
        </div>

        <div class="stats-item recursions">
            <div class="number">@_StatResponse.Response.Stats.TotalRecursive.ToString("N0").EnglishToPersianNumbers()</div>
            <div class="percentage">@GetPrecentage(_StatResponse.Response.Stats.TotalQueries,_StatResponse.Response.Stats.TotalRecursive)</div>
            <div class="title">Recursive</div>
        </div>

        <div class="stats-item cache-hit">
            <div class="number">@_StatResponse.Response.Stats.TotalCached.ToString("N0").EnglishToPersianNumbers()</div>
            <div class="percentage">@GetPrecentage(_StatResponse.Response.Stats.TotalQueries,_StatResponse.Response.Stats.TotalCached)</div>
            <div class="title">Cached</div>
        </div>

        <div class="stats-item blocked">
            <div class="number">@_StatResponse.Response.Stats.TotalBlocked.ToString("N0").EnglishToPersianNumbers()</div>
            <div class="percentage">@GetPrecentage(_StatResponse.Response.Stats.TotalQueries,_StatResponse.Response.Stats.TotalBlocked)</div>
            <div class="title">Blocked</div>
        </div>

        <div class="stats-item clients">
            <div class="number">@_StatResponse.Response.Stats.TotalClients.ToString("N0").EnglishToPersianNumbers()</div>
            <div class="percentage">&nbsp;</div>
            <div class="title">Clients</div>
        </div>
    </div>
    <div>
        <BitChart Config="_lineChartConfig" @ref="_lineChart" />
    </div>
    <div class="row">
        <div class="col-lg-8 col-md-12">
            <div>
                <BitChart Config="_pieChartConfigQueryResponse" @ref="_pieChartQueryResponse" />
            </div>
            <div>
                <BitChart Config="_pieChartConfigQueryType" @ref="_pieChartQueryType" />
            </div>
        </div>
        <div class="col-lg-4 col-md-12">
            <h4>Top Domains</h4>
            @foreach (var domain in _StatResponse.Response.Topdomains)
            {
                <div class="row">
                    <div class="col-9">
                        <BitLabel>@domain.Name</BitLabel>
                    </div>
                    <div class="col-3">
                        <BitLabel>@domain.Hits</BitLabel>
                    </div>
                </div>
            }
            <hr>
            <h4>Top Clients</h4>
            @foreach (var client in _StatResponse.Response.Topclients)
            {
                <div class="row">
                    <div class="col-9">
                        <BitLabel>@client.Name</BitLabel>
                    </div>
                    <div class="col-3">
                        <BitLabel>@client.Hits</BitLabel>
                    </div>
                </div>
            }
        </div>
    </div>


}

@code {
    private StatResponse _StatResponse = null;
    private StatTypeEnum StatType = StatTypeEnum.LastHour;
    private BitDateRangePicker rangeDatePicker;

    protected override async Task OnInitializedAsync()
    {
        InitlineChartExample();
        InitPieChartQueryResponse();
        InitPieChartQueryType();

        await StatTypeOnChange(String.Empty);
    }

    async Task StatTypeOnChange(string value)
    {
        if (String.IsNullOrEmpty(value))
            value = StatTypeEnum.LastHour.ToString();
        StatType = (StatTypeEnum)System.Enum.Parse(typeof(StatTypeEnum), value);

        await GenerateReport();
    }

    async Task GenerateReport()
    {
        if (StatType == StatTypeEnum.Custom && (rangeDatePicker == null || rangeDatePicker.Value!.StartDate == null || rangeDatePicker.Value.EndDate == null))
            return;
        else if (StatType == StatTypeEnum.Custom && rangeDatePicker != null)
            _StatResponse = await _StaticRepository.GetStat(StatType, rangeDatePicker.Value!.StartDate!.Value.DateTime, rangeDatePicker.Value.EndDate!.Value.DateTime);
        else
            _StatResponse = await _StaticRepository.GetStat(StatType);


        BindLineChartData();
        BindPieChartDataQueryResponse();
        BindPieChartDataQueryType();

        if (_lineChart != null)
            await _lineChart.Update();
        if (_pieChartQueryResponse != null)
            await _pieChartQueryResponse.Update();
        if (_pieChartQueryType != null)
            await _pieChartQueryType.Update();
    }

    private List<BitDropDownItem> GetStatTypeItems()
    {
        List<BitDropDownItem> result = new List<BitDropDownItem>();
        foreach (var item in Enum.GetValues(typeof(StatTypeEnum)))
            result.Add(new BitDropDownItem { Text = item.ToString()!, Value = item.ToString()! });
        return result;
    }

    string GetPrecentage(int total, int current) => (total == 0 ? 0 : ((current * 100 / total))).ToString().EnglishToPersianNumbers() + "%";

    #region LineChart
    private BitChart _lineChart;
    private BitChartLineConfig _lineChartConfig;

    void InitlineChartExample()
    {
        _lineChartConfig = new BitChartLineConfig
            {
                Options = new BitChartLineOptions
                {
                    Responsive = true,
                    Animation = new BitChartAnimation
                    {
                        Duration = 1200,
                    },
                    Tooltips = new BitChartTooltips
                    {
                        Mode = BitChartInteractionMode.Nearest,
                        Intersect = true
                    },
                    Hover = new BitChartHover
                    {
                        Mode = BitChartInteractionMode.Nearest,
                        Intersect = true
                    },
                }
            };
    }
    void BindLineChartData()
    {

        _lineChartConfig.Data.Labels.Clear();
        _lineChartConfig.Data.Datasets.Clear();

        foreach (var dataset in _StatResponse.Response.MainChartData.Datasets)
        {
            _lineChartConfig.Data.Datasets.Add(new BitChartLineDataset<int>(dataset.Data)
                {
                    Label = dataset.Label,
                    BackgroundColor = BitChartColorUtil.FromDrawingColor(ColorHelper.ParseColor(dataset.BackgroundColor)),
                    BorderColor = BitChartColorUtil.FromDrawingColor(ColorHelper.ParseColor(dataset.BorderColor)),
                    Fill = dataset.Fill,
                    BorderWidth = 1
                });
        }

        foreach (var label in _StatResponse.Response.MainChartData.Labels)
            _lineChartConfig.Data.Labels.Add(label.ToLocalTime().ToString(_StatResponse.Response.MainChartData.LabelFormat.Replace("DD","dd")));

    }
    #endregion

    #region PieCharQueryResponse
    private BitChartPieConfig _pieChartConfigQueryResponse;
    private BitChart _pieChartQueryResponse;

    private void InitPieChartQueryResponse()
    {
        _pieChartConfigQueryResponse = new BitChartPieConfig
            {
                Options = new BitChartPieOptions
                {
                    Responsive = true,
                }
            };
    }

    void BindPieChartDataQueryResponse()
    {

        _pieChartConfigQueryResponse.Data.Labels.Clear();
        _pieChartConfigQueryResponse.Data.Datasets.Clear();

        BitChartPieDataset<int>
    dataset = new BitChartPieDataset<int>
        (_StatResponse.Response.QueryResponseChartData.Datasets[0].Data)
        {
            BackgroundColor = _StatResponse.Response.QueryResponseChartData.Datasets[0].BackgroundColor.Select(x => BitChartColorUtil.FromDrawingColor(ColorHelper.ParseColor(x))).ToArray()
        };

        foreach (var label in _StatResponse.Response.QueryResponseChartData.Labels)
        {
            _pieChartConfigQueryResponse.Data.Labels.Add(label);
        }
        _pieChartConfigQueryResponse.Data.Datasets.Add(dataset);
    }

    #endregion

    #region PieCharQueryType

    private BitChartPieConfig _pieChartConfigQueryType;
    private BitChart _pieChartQueryType;

    private void InitPieChartQueryType()
    {
        _pieChartConfigQueryType = new BitChartPieConfig
            {
                Options = new BitChartPieOptions
                {
                    Responsive = true,
                }
            };
    }

    void BindPieChartDataQueryType()
    {

        _pieChartConfigQueryType.Data.Labels.Clear();
        _pieChartConfigQueryType.Data.Datasets.Clear();

        BitChartPieDataset<int>
            dataset = new BitChartPieDataset<int>
                (_StatResponse.Response.Querytypechartdata.Datasets[0].Data)
                {
                    BackgroundColor = _StatResponse.Response.Querytypechartdata.Datasets[0].BackgroundColor.Select(x => BitChartColorUtil.FromDrawingColor(ColorHelper.ParseColor(x))).ToArray()
                };

        foreach (var label in _StatResponse.Response.Querytypechartdata.Labels)
        {
            _pieChartConfigQueryType.Data.Labels.Add(label);
        }
        _pieChartConfigQueryType.Data.Datasets.Add(dataset);
    }

    #endregion
}
