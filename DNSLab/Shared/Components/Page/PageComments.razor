@inject ICommentRepository _CommentRepository
@inject AuthenticationStateProvider auth
@inject NavigationManager _NavigationManager

<h3>نظرات کاربران</h3>
<div class="row">
    <BitMessageBar MessageBarType="BitMessageBarType.Info">
        @if (PageCommentAndReplies != null && PageCommentAndReplies.Count() == 0)
        {
            <BitLabel>تا کنون هیچ دیدگاهی ثبت نشده است ، شما میتونید اولین نفر باشید.</BitLabel>
        }
        <BitLabel>اگر اطلاعات یا دیدگاهی در مورد مطالب این صفحه دارید، لطفا با ما و کاربران دیگر به اشتراک بگذارید.</BitLabel>
    </BitMessageBar>
    <div class="col-auto">
        <BaseButtonComponent Caption="ثبت دیدگاه"
                             Icon="BitIconName.CommentAdd"
                             OnClick="async() => await AddNewPageComment()">
        </BaseButtonComponent>
    </div>
    @if (PageCommentAndReplies != null)
    {
        <div class="col-10">
            @foreach (var item in PageCommentAndReplies.OrderByDescending(x => x.Comment.CreateDate))
            {
                <PageCommentItem PageComment="item.Comment" AuthUserId="CurrentUserId" ReplyButtonClick="async ()=>await AddNewPageComment(item.Comment)">
                    @if (item.Replies.Count() > 0)
                    {
                        foreach (var reply in item.Replies)
                        {
                            <PageCommentItem PageComment="reply" AuthUserId="CurrentUserId" ReplyButtonClick="async ()=> await AddNewPageComment(reply)"></PageCommentItem>
                        }
                    }
                </PageCommentItem>
            }
        </div>
    }
</div>

<Modal @ref="AddNewPageCommentModal">
    <Title><BitLabel>@(ReplyToId == Guid.Empty ? "ثبت دیدگاه جدید" : "پاسخ به دیدگاه")</BitLabel></Title>
    <Body>
        <BitLabel>
            @(ReplyToId == Guid.Empty ?
            "اطلاعات یا دیدگاه خود در مورد مطالب این صفحه دارید را در کادر پایین وارد نمایید."
            : "متن پاسخ خود را وارد نمایید")
        </BitLabel>
        <BitTextField IsMultiline=true
                      Rows="7"
                      @bind-Value="NewPageComment.Text">
        </BitTextField>
    </Body>
    <Footer>
        <BaseButtonComponent Caption="@(ReplyToId == Guid.Empty ? "ثبت دیدگاه": "ثبت پاسخ")"
                             Icon="BitIconName.CommentAdd"
                             OnClick="SubmitComment"></BaseButtonComponent>
    </Footer>
</Modal>


@code {
    [Parameter] public Guid PageId { get; set; }

    Guid CurrentUserId = Guid.Empty;
    Guid ReplyToId = Guid.Empty;
    Guid BaseCommentId = Guid.Empty;

    Modal AddNewPageCommentModal;
    CreatePageCommentDTO NewPageComment = new CreatePageCommentDTO { Text = String.Empty };

    IEnumerable<PageCommentAndRepliesDTO> PageCommentAndReplies;

    protected override async Task OnInitializedAsync()
    {
        PageCommentAndReplies = await _CommentRepository.GetPageComments(PageId);

        var user = (await auth.GetAuthenticationStateAsync()).User;

        if (user.Identity != null)
            CurrentUserId = Guid.Parse(user.Identities.FirstOrDefault()!.Claims.FirstOrDefault(x => x.Type.ToLower() == "nameid")!.Value);
    }

    async Task AddNewPageComment(PageCommentDTO replyTo = null)
    {
        if (replyTo == null)
            ReplyToId = Guid.Empty;
        else
        {
            ReplyToId = replyTo.Id;
            BaseCommentId = replyTo.ReplyTo == null ? replyTo.Id : replyTo.BaseCommentId!.Value;
        }


        if (CurrentUserId == Guid.Empty)
            _NavigationManager.NavigateTo($"/user/auth?RedirectTo={new Uri(_NavigationManager.Uri).AbsolutePath}");
        else
            await AddNewPageCommentModal.Open();
    }

    async Task SubmitComment()
    {
        NewPageComment.PageId = PageId;

        if (ReplyToId != Guid.Empty)
        {
            NewPageComment.ReplyTo = ReplyToId;
            NewPageComment.BaseCommentId = BaseCommentId;
        }

        if (await _CommentRepository.AddNewPageComment(NewPageComment))
        {
            NewPageComment.Text = String.Empty;
            NewPageComment.ReplyTo = Guid.Empty;
            NewPageComment.BaseCommentId = Guid.Empty;

            await AddNewPageCommentModal.Close();
            await OnInitializedAsync();
        }
    }
}
